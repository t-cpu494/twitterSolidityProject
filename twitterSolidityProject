// SPDX-License-Identifier: MIT
pragma solidity >= 0.5.0 < 0.9.0;

contract Twitter {
    struct Tweet{
        uint tweetId;
        address tweetAuthor;
        string tweetContent;
        uint tweetedAt;
    }

    struct DM {
        uint DMId;
        string DMContent;
        address DMfrom;
        address DMto;
        uint DMedAt;
    }

    mapping( uint => Tweet ) public tweets;
    mapping( address => uint[] ) public tweetsOf;
    mapping( address => DM[] ) conversations;
    mapping( address => mapping( address => bool )) operators;
    mapping( address => address[] ) public following;

    uint nextTweetId;
    uint nextDMId;

    function tweet(address tweetFrom, string calldata tweetContent) public {
        operators[msg.sender][msg.sender] = true;
        require(operators[tweetFrom][msg.sender] == true, "You can't tweet on behalf of said address's account!");
        tweets[nextTweetId] = Tweet(nextTweetId, tweetFrom, tweetContent, block.timestamp);
        tweetsOf[tweetFrom].push(nextTweetId);
        nextTweetId++;
    }

    function DMm(address DMfrom, address DMto, string calldata DMContent) public {
        operators[msg.sender][msg.sender] = true;
        require(operators[DMfrom][msg.sender] == true, "You can't DM on behalf of said address's account!");
        conversations[DMfrom].push( DM ( nextDMId, DMContent, DMfrom, DMto, block.timestamp ) );
        nextDMId++;
    }

    function follow(address OnBehalfOf, address followThis) public {
        operators[msg.sender][msg.sender] = true;
        require(operators[OnBehalfOf][msg.sender] == true, "You can't follow this user on behalf of said user!");
        following[OnBehalfOf].push(followThis);
    }

    function allow(address operator) public {
        operators[msg.sender][operator] = true;
    }
    
    function disallow(address operator) public {
        operators[msg.sender][operator] = false;
    }

    function getLatestTweets(uint count) public view returns(Tweet[] memory) {
        require(count > 0 && count <= nextTweetId, "Count is not proper!");
        Tweet[] memory _tweets = new Tweet[](count);   //array length = count

        uint j;

        for(uint i = nextTweetId - 1; i >= nextTweetId - count;) {   // count = 5 nextId = 7; 7 - 5 = 2, 3, 4, 5, 6
        Tweet storage structure = tweets[i];

        _tweets[j] = Tweet(structure.tweetId,
                           structure.tweetAuthor,
                           structure.tweetContent,
                           structure.tweetedAt);

                           j++;
                           if(i != 0){ 
                               i--; 
                            } else {
                                break;
                            }
        }
        return _tweets;
    }

    function getLatestTweetsOfUser(address user, uint count) public view returns(Tweet[] memory) {
        Tweet[] memory _tweets = new Tweet[](count);   //new memory array whose length is count. tweetsOf[user] is having all the ids of the user's tweets.
        
        uint[] memory ids = tweetsOf[user];   // ids is an array.

        require(count > 0 && count <= ids.length, "Count is improper!");
        uint j;
        for(uint i = ids.length - 1; i >= ids.length - count;) { // 5 - 3 = 2, 3, 4
        Tweet storage structure = tweets[ids[i]];   // i = 2 ids[2] = 15 tweets[15]

        _tweets[j] = Tweet(structure.tweetId,
                           structure.tweetAuthor,
                           structure.tweetContent,
                           structure.tweetedAt);

                           j++;
                           if(i != 0 ){
                               i--;
                           } else {
                               break;
                           }

        }
        return _tweets;
        }
    }
